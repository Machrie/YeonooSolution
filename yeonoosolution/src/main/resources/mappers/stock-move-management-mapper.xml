<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.choongang.yeonosolution.stMoveDetailMapper">
	
	<!-- stockMoveStatus 이동현황 페이지 -->
	<select id="selectStockMoveStatusList" resultType="SMMStMoveDetailDto">
		SELECT 
			sm.move_date, sm.move_type, 
			smd.move_code, smd.item_code, smd.wh_code_out, smd.wh_code_in, smd.move_quantity, smd.memo, smd.sorder,
            i.item_name, 
            NVL(wsd.good_quantity, 0) + NVL(wsd.bad_quantity, 0) as stock_quantity
		FROM 
			st_move sm
            JOIN st_move_detail smd ON sm.move_code = smd.move_code
            JOIN item i ON smd.item_code = i.item_code
            LEFT JOIN wh_stock_detail wsd ON smd.item_code = wsd.item_code AND wsd.wh_code = smd.wh_code_out
		WHERE 
			sm.move_type = '확정'
		AND 
			sm.delete_status = 'N'
		ORDER BY
			smd.move_code, smd.sorder
	</select>
	
	<!-- 이동등록현황 페이지 통합 검색 결과 -->
	<select id="selectStockMoveSearchListByKeywordAndDate" parameterType="map" resultType="SMMStMoveDetailDto">
		<![CDATA[
		SELECT 
			sm.move_date, sm.move_type, 
			smd.move_code, smd.item_code, smd.wh_code_out, smd.wh_code_in, smd.move_quantity, smd.memo, smd.sorder,
			i.item_name, 
			NVL(wsd.good_quantity, 0) + NVL(wsd.bad_quantity, 0) as stock_quantity
		FROM 
			st_move sm
			JOIN st_move_detail smd ON sm.move_code = smd.move_code
			JOIN item i ON smd.item_code = i.item_code
			LEFT JOIN wh_stock_detail wsd ON smd.item_code = wsd.item_code AND wsd.wh_code = smd.wh_code_out
		WHERE 
			sm.move_type = '확정'
		AND 
			sm.delete_status = 'N'
		AND (
			TRIM(#{keyword}) IS NULL
			OR LOWER(smd.move_code) LIKE '%' || #{keyword} || '%'
			OR LOWER(smd.item_code) LIKE '%' || #{keyword} || '%'
			OR LOWER(i.item_name) LIKE '%' || #{keyword} || '%'
			OR LOWER(smd.wh_code_out) LIKE '%' || #{keyword} || '%'
			OR LOWER(smd.wh_code_in) LIKE '%' || #{keyword} || '%'
			OR LOWER(smd.memo) LIKE '%' || #{keyword} || '%'
		)
		AND ( 
			#{startDate} IS NULL OR TO_DATE(sm.move_date, 'YYYY-MM-DD') >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		)
		AND (
			#{endDate} IS NULL OR TO_DATE(sm.move_date, 'YYYY-MM-DD') <= TO_DATE(#{endDate}, 'YYYY-MM-DD')
		)
		ORDER BY
	    	smd.move_code, smd.sorder
	    ]]>
	</select>
	
	<!-- 이동등록 리스트 -->
	<select id="selectStockMoveRegistrationList" resultType="SMMStMoveDto">
		SELECT *
		FROM 
			st_move sm
		WHERE
			sm.delete_status = 'N'
		ORDER BY
			sm.move_code
	</select>
	
	<!-- 이동확정 변경-->
	<update id="updateStockMoveConfirmationByMoveCode" parameterType="java.lang.String">
		UPDATE st_move
		SET move_type = '확정'
		where move_code = #{moveCode}
	</update>
	
	<!-- 이동 세부내역 List -->
	<select id="selectStockMoveDetailListByMoveCode" parameterType="java.lang.String" resultType="SMMStMoveDetailDto">
		SELECT 
			smd.move_code, smd.wh_code_out, smd.wh_code_in, smd.move_quantity, smd.sorder, smd.memo,
			i.item_code, i.item_name, 
			NVL(wsd.good_quantity, 0) + NVL(wsd.bad_quantity, 0) as stock_quantity
		FROM 
			st_move_detail smd
			JOIN item i ON smd.item_code = i.item_code
			LEFT JOIN wh_stock_detail wsd ON smd.item_code = wsd.item_code AND wsd.wh_code = smd.wh_code_out
		WHERE
			smd.move_code = #{moveCode}
		ORDER BY
			smd.move_code, smd.sorder
	</select>
	
	<!-- 이동등록 insert -->
	<insert id="insertStockMoveRegistrationByMemberUidAndMoveDateAndMoveMemo" parameterType="map">
		INSERT INTO st_move (move_code, begin_end_inventory, move_date, reg_date, reg_user, 
							update_date, update_user, move_type, delete_status, memo)
		VALUES ('MOVE' || move_code_seq.nextval, 1, #{moveDate}, sysdate, #{memberUid}, 
							null, null, '저장', 'N', #{moveMemo})
	</insert>
	
	<!-- 제품코드 리스트(모달) -->
	<select id="selectItemCodeList" resultType="SMMItemDto">
		SELECT 
			item_code, wh_code, item_name
		FROM 
			item
		ORDER BY
			item_code
	</select>
	
	<!-- 창고코드 리스트(모달) -->
	<select id="selectWhCodeList" resultType="SMMWhDto">
		SELECT 
			wh_code, wh_name
		FROM
			wh
		ORDER BY
			wh_code
	</select>
	
	<!-- 세부내역 행 기입용 -->
	<select id="selectItemCodeRowDataListByItemCode" parameterType="java.lang.String" resultType="SMMItemDto">
		SELECT 
			i.item_code, i.wh_code, i.item_name,
			NVL(wsd.good_quantity, 0) + NVL(wsd.bad_quantity, 0) as stock_quantity
		FROM 
			item i
			LEFT JOIN wh_stock_detail wsd ON i.item_code = wsd.item_code
		WHERE
			i.item_code = #{itemCode}
	</select>
	
	<!-- 세부내역 insert -->
	<insert id="insertStockMoveDetailByStMoveDetailDto" parameterType="SMMStMoveDetailDto">
		INSERT INTO st_move_detail (move_code, sorder, wh_code_in, wh_code_out, item_code, move_quantity, memo)
		VALUES (#{moveCode}, #{sorder}, #{whCodeIn}, #{whCodeOut}, #{itemCode}, #{moveQuantity}, #{memo})
	</insert>
	
	<!-- move_code에 맞는 sorder 가져오기 -->
	<select id="selectSorderByMoveCode" parameterType="java.lang.String" resultType="SMMStMoveDetailDto">
		SELECT 
			sorder
		FROM 
			st_move_detail
		WHERE 
			move_code = #{moveCode}
	</select>
	
	<!-- 이동등록 수정 -->
	<update id="updateStockMoveRegistrationByMoveCodeAndMoveMemo" parameterType="map">
		UPDATE 
			st_move
		SET 
			memo = #{moveMemo}
		WHERE 
			move_code = #{moveCode}
	</update>
	
	<!-- 이동등록 삭제 ( delete_status 컬럼 N -> Y) -->
	<update id="updateStockMoveRegistrationDeleteStatusByMoveCode" parameterType="java.lang.String">
		UPDATE
			st_move
		SET
			delete_status = 'Y'
		WHERE
			move_code = #{moveCode}
	</update>
	
	<!-- 세부내역 수정 -->
	<update id="updateStockMoveDetailByMoveCodeAndSorderAndMoveMemo" parameterType="map">
		UPDATE
			st_move_detail
		SET
			memo = #{moveMemo}
		WHERE
			move_code = #{moveCode}
		AND
			sorder = #{sorder}
	</update>
	
	<!-- 세부내역 삭제 -->
	<delete id="deleteStockMoveDetailByMoveCodeAndSorder" parameterType="map">
		DELETE 
			st_move_detail
		WHERE
			move_code = #{moveCode}
		AND
			sorder = #{sorder}
	</delete>
	
	<!-- 세부내역 등록,수정,삭제 시 이동등록에 수정일자 및 수정자 변경 -->
	<update id="updateStockMoveRegistrationDateAndUserByMemberUidAndMoveCode" parameterType="map">
		UPDATE
			st_move
		SET
			update_date = sysdate,
			update_user = #{memberUid}
		WHERE
			move_code = #{moveCode}
	</update>
	<!-- 이동 확정 시 재고 변경 -->
	<update id="updateWhStockDetailByStockMoveDetailList" parameterType="SMMStMoveDetailDto">
		UPDATE 
			wh_stock_detail
		SET
			good_quantity = good_quantity - #{moveQuantity}
		WHERE
			wh_code = #{whCodeOut}
		AND	
			item_code = #{itemCode}
	</update>
	
</mapper>