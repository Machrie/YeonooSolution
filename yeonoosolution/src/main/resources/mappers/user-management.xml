<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.choongang.yeonsolution.user-management-mapper">
	<!-- login한 사람의 uid로 본인 정보 가저옴 -->
	<select id="umSelectMyInfoByMemberUid" parameterType="BIMemberDto" resultType="BIMemberDto">
		SELECT	*
		FROM	member
		WHERE	member_uid = #{memberUid}
	</select>
	
	<!-- 부서정보 전부 가져옴  -->
	<select id="umSelectDeptList" resultType="UMDepartmentDto">
		SELECT	*
		FROM	department
		WHERE   dept_yn = 'Y'
	</select>
	
	<!-- 직급정보 전부 가져옴  -->
	<select id="umSelectJobList" resultType="UMJobDto">
		SELECT	*
		FROM	job
		WHERE   job_yn = 'Y'
	</select>
	
	<!-- 이미지 파일 경로와 이름을 db에 저장 -->
	<update id="umUpdateMemberImageByMemberUid" parameterType="BIMemberDto">
		UPDATE	member
		SET		member_image	= #{memberImage}
		WHERE	member_uid		= #{memberUid}
	</update>
	
	<!-- 이미지 수정 시 이미지 이름을 가져와서 기존 파일을 삭제함 -->
	<select id="umSelectMemberImageByMemberUid" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT	member_image
		FROM	member
		WHERE	member_uid	= #{memberUid}
	</select>
	
	<!-- 비밀번호 검증을 위해 db에 저장되어 있는 비번을 가져옴.  -->
	<select id="umSelectDbPasswordByMemberUid" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT	password
		FROM	member
		WHERE	member_uid = #{memberUid}
	</select>
	
	<!-- 개인정보 수정   -->
	<update id="umUpdateMyInfoByMemberUid" parameterType="BIMemberDto">
		UPDATE	member
		SET		member_name	= #{memberName},
				address 	= #{address},
				tel			= #{tel},
				update_user = #{memberUid},
				update_date = sysdate		
		WHERE	member_uid 	= #{memberUid}
	</update>
	
	<!-- 패스워드 변경 -->
	<update id="umUpdateMyPasswordByMemberUid" parameterType="BIMemberDto">
		UPDATE	member
		SET		password 	= #{changePassword}	
		WHERE	member_uid 	= #{memberUid}
	</update>
	
	<!--부서 등록  -->
	
	<!-- 부서이름 검색  -->
	<select id="umSelectDeptListByDeptName" parameterType="java.lang.String" resultType="UMDepartmentDto">
		SELECT	*
		FROM	department
		WHERE	dept_name like '%'|| #{deptName} ||'%'
		AND		dept_yn = 'Y'
	</select>
	
	<!-- kind == 1 : 부서 정보 수정 -->
	<!-- kind == 2 : 부서 삭제-->
	<update id="umUpdateDeptByDeptCode" parameterType="UMDepartmentDto">
		UPDATE	department
		SET		
		<choose>
			<when test="kind == 1">
				dept_name		= #{deptName},
				update_user		= #{memberUid},
				update_date		= sysdate
			</when>
			<when test="kind == 2">
				dept_yn 		= 'N',
				update_user		= #{memberUid},
				update_date		= sysdate
			</when>
		</choose>
		WHERE	dept_code		= #{deptCode}
	</update>
	
	<!-- 부서 등록 시 부서 이름 사용중인지 확인  -->
	<select id="umSelectDbDeptNameByDeptName" parameterType="UMDepartmentDto" resultType="java.lang.String">
		SELECT	dept_name 
		FROM	department
		WHERE	dept_name = #{deptName}
		AND  	dept_yn   = 'Y'
	</select>
	
	<!-- 부서 등록 -->
	<insert id="umInsertDeptByDeptName" parameterType="UMDepartmentDto">
		INSERT INTO department(dept_code, dept_name, dept_yn, reg_date, reg_user)
		VALUES('DEPARTMENT' || DEPARTMENT_ID_SEQ.NEXTVAL, #{deptName}, 'Y', sysdate, #{memberUid})
	</insert>
	
	<!-- kind == null 	: 해당 부서의 직원 표시 -->
	<!-- kind == 1 		: 해당 부서에서 특정 직원 검색 -->
	<select id="umSelectMemberByDeptCode" parameterType="BIMemberDto" resultType="BIMemberDto">
		SELECT	m.*, d.dept_name, j.job_name
		FROM	member m, department d, job j
		WHERE	m.dept_code = d.dept_code
		AND     m.job_code  = j.job_code
		<choose>
			<when test="kind == null">
				AND     m.dept_code	= #{deptCode}
				AND		m.member_yn = 'Y'
			</when>
			<when test="kind == 1">
				AND     m.dept_code	= #{deptCode}
				AND		m.member_name like '%'|| #{memberName} ||'%' 
				AND		m.member_yn = 'Y'
			</when>
		</choose>
	</select>
	
	
	<!-- 직급등록 및 확인  -->
	
	<!-- kind == 1 : 직급 정보 수정 -->
	<!-- kind == 2 : 직급 삭제 -->
	<update id="umUpdateJobByJobCode" parameterType="UMJobDto">
		UPDATE 	job
		SET		
			<choose>
				<when test="kind == 1">
					job_name		= #{jobName},
					update_user		= #{memberUid},
					update_date		= sysdate
				</when>
				<when test="kind == 2">
					job_yn 			= 'N',
					update_user		= #{memberUid},
					update_date		= sysdate
				</when>
			</choose>
		WHERE	job_code			= #{jobCode}
	</update>
	
	<!-- 직급 등록  -->
	<insert id="umInsertJobByJobName" parameterType="UMJobDto">
		INSERT INTO job(job_code, job_name, job_yn, reg_date, reg_user)
		VALUES ('JOB' || JOB_ID_SEQ.NEXTVAL, #{jobName}, 'Y', sysdate, #{memberUid})
	</insert>
	
	<!-- 직급 등록 시 똑같은 직급이름이 있는 지 확인  -->
	<select id="umSelectDbJobNameByJobName" parameterType="UMJobDto" resultType="java.lang.String">
		SELECT	job_name
		FROM	job
		WHERE	job_name = #{jobName}
		AND		job_yn 	 = 'Y' 
	</select>
	
	<!-- 직급 이름 검색 -->
	<select id="umSelectJobListByJobName" parameterType="java.lang.String" resultType="UMJobDto">
		SELECT	*
		FROM	job
		WHERE	job_name like '%'|| #{jobName} ||'%'
		AND		job_yn = 'Y'
	</select>
	
	<!-- kind == null 	: 해당 직급의 직원 표시 -->
	<!-- kind == 1 		: 해당 직급에서 특정 직원 검색 -->
	<select id="umSelectMemberByJobCode" parameterType="UMJobDto" resultType="BIMemberDto">
		SELECT	m.*, d.dept_name, j.job_name
		FROM	member m, department d, job j
		WHERE	m.dept_code = d.dept_code
		AND     m.job_code  = j.job_code
		<choose>
			<when test="kind == null">
				AND     m.job_code	= #{jobCode}
				AND		m.member_yn = 'Y'
			</when>
			<when test="kind == 1">
				AND     m.job_code	= #{jobCode}
				AND		m.member_name like '%'|| #{memberName} ||'%' 
				AND		m.member_yn = 'Y'
			</when>
		</choose>
	</select>
</mapper>